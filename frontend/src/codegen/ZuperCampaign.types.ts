/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Timestamp = Uint64;
export type Uint64 = string;
export type IncentiveCriteria = {
  all_donations_above: {
    min_donation: Uint64;
  };
} | {
  tokens_donated_by_position: {
    from_position: number;
    to_position: number;
  };
} | {
  percent_tokens_donated: {
    from_percent: Decimal;
    to_percent: Decimal;
  };
} | {
  first_donors: {
    count: number;
    min_donation: Uint64;
  };
} | {
  first_donors_by_percentage: {
    min_donation: Uint64;
    percentage: Decimal;
  };
};
export type Decimal = string;
export type Reward = ("one_of_one_nft_airdrop" | "nft_airdrop" | "whitelist_spot") | {
  token_distribution: {
    distribution_type: TokenAirdropDistributionType;
    token_to_airdrop: Coin;
  };
};
export type TokenAirdropDistributionType = "equal" | "proportional";
export type Uint128 = string;
export interface InstantiateMsg {
  campaign_metadata: CampaignMetadata;
  protocol_settings: ProtocolInstantiateSettings;
}
export interface CampaignMetadata {
  accepted_denom: string;
  description: string;
  end_timestamp: Timestamp;
  incentives: [IncentiveCriteria, Reward][];
  is_nsfw: boolean;
  name: string;
  owner: string;
  start_timestamp: Timestamp;
  test_campaign: boolean;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface ProtocolInstantiateSettings {
  fee_address: string;
  withdrawl_fee: Decimal;
}
export type ExecuteMsg = {
  set_owner: {
    owner: string;
  };
} | {
  deposit: {
    donor_address: string;
  };
} | "un_donate" | {
  complete_campaign: {};
} | "cancel_campaign" | {
  distribute_rewards: {
    limit?: number | null;
  };
};
export type QueryMsg = ("total_donations" | "total_donors") | "campaign_metadata" | "campaign_status" | {
  donations_by_size: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  donations_by_time: {
    ascending: boolean;
    limit?: number | null;
    start_after?: Timestamp | null;
  };
} | {
  user_donation: {
    address: string;
  };
};
export type Addr = string;
export interface ValidatedCampaignMetadata {
  accepted_denom: string;
  description: string;
  end_timestamp: Timestamp;
  fee_address: Addr;
  incentives: [IncentiveCriteria, Reward][];
  instantiated_by: Addr;
  is_nsfw: boolean;
  name: string;
  owner: Addr;
  start_timestamp: Timestamp;
  test_campaign: boolean;
  withdrawl_fee: Decimal;
}
export type CampaignStatus = "active" | "funding_closed" | "completed" | "expired" | "cancelled";
export type ArrayOfTupleOfAddrAndCoin = [Addr, Coin][];
export type ArrayOfTupleOfAddrAndCoinAndTimestamp = [Addr, Coin, Timestamp][];
export interface UserDonationsResponse {
  donations: [Uint64, Timestamp][];
  total: Uint128;
}