/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Decimal = string;
export type Uint128 = string;
export interface InstantiateMsg {
  admin?: string | null;
  campaign_contract_code_id: number;
  campaign_funds_withdrawl_fee: Decimal;
  creation_fee: Coin;
  enforce_whitelist: boolean;
  treasury_address: string;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  migrate_campaigns: {
    code_id: Uint64;
    limit?: number | null;
    msg: Binary;
    start_after?: string | null;
  };
} | {
  enforce_whitelist: boolean;
} | {
  grant_whitelist: {
    address: string;
    test_creation_only: boolean;
  };
} | {
  revoke_whitelist: string;
} | {
  set_admin: string;
} | {
  set_campaign_contract_code_id: Uint64;
} | {
  create_campaign: {
    campaign_metadata: CampaignMetadata;
  };
} | "archive_campaign" | {
  delete_campaign: {
    address: string;
  };
};
export type Uint64 = string;
export type Binary = string;
export type Timestamp = Uint64;
export type IncentiveCriteria = {
  all_donations_above: {
    min_donation: Uint64;
  };
} | {
  tokens_donated_by_position: {
    from_position: number;
    to_position: number;
  };
} | {
  percent_tokens_donated: {
    from_percent: Decimal;
    to_percent: Decimal;
  };
} | {
  first_donors: {
    count: number;
    min_donation: Uint64;
  };
} | {
  first_donors_by_percentage: {
    min_donation: Uint64;
    percentage: Decimal;
  };
};
export type Reward = {
  one_of_one_nft_airdrop: {};
} | {
  nft_airdrop: {};
} | {
  whitelist_spot: {};
} | {
  token_distribution: {
    distribution_type: TokenAirdropDistributionType;
    token_to_airdrop: Coin;
  };
};
export type TokenAirdropDistributionType = "equal" | "proportional";
export interface CampaignMetadata {
  accepted_denom: string;
  description: string;
  end_timestamp: Timestamp;
  incentives: [IncentiveCriteria, Reward][];
  is_nsfw: boolean;
  name: string;
  owner: string;
  start_timestamp: Timestamp;
  test_campaign: boolean;
}
export type QueryMsg = "settings" | {
  creator_whitelist: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  campaigns: {
    campaign_status?: CampaignStatus | null;
    campaign_type: CampaignType;
    limit?: number | null;
    start_after?: string | null;
  };
};
export type CampaignStatus = "active" | "funding_closed" | "completed" | "expired" | "cancelled";
export type CampaignType = "main" | "test" | "main_archived" | "test_archived";
export type Addr = string;
export type ArrayOfCampaignsResponse = CampaignsResponse[];
export interface CampaignsResponse {
  campaign_addr: Addr;
  metadata: ValidatedCampaignMetadata;
  status: CampaignStatus;
  total_donations: Coin;
  total_donors: Uint64;
}
export interface ValidatedCampaignMetadata {
  accepted_denom: string;
  description: string;
  end_timestamp: Timestamp;
  fee_address: Addr;
  incentives: [IncentiveCriteria, Reward][];
  instantiated_by: Addr;
  is_nsfw: boolean;
  name: string;
  owner: Addr;
  start_timestamp: Timestamp;
  test_campaign: boolean;
  withdrawl_fee: Decimal;
}
export type ArrayOfWhitelistEntry = WhitelistEntry[];
export interface WhitelistEntry {
  address: Addr;
  test_creation_only: boolean;
}
export interface IndexSettings {
  admin: Addr;
  campaign_contract_code_id: number;
  campaign_funds_withdrawl_fee: Decimal;
  creation_fee: Coin;
  enforce_whitelist: boolean;
  treasury_address: Addr;
}