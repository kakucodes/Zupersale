{
  "contract_name": "campaign-index",
  "contract_version": "0.2.2",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "campaign_contract_code_id",
      "campaign_funds_withdrawl_fee",
      "creation_fee",
      "enforce_whitelist",
      "treasury_address"
    ],
    "properties": {
      "admin": {
        "description": "Contract administrator- if not specified it will default to the contract instantiator",
        "type": [
          "string",
          "null"
        ]
      },
      "campaign_contract_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "campaign_funds_withdrawl_fee": {
        "$ref": "#/definitions/Decimal"
      },
      "creation_fee": {
        "$ref": "#/definitions/Coin"
      },
      "enforce_whitelist": {
        "type": "boolean"
      },
      "treasury_address": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Migrate the campaigns from the old contract to the new one ADMIN ONLY ACTION",
        "type": "object",
        "required": [
          "migrate_campaigns"
        ],
        "properties": {
          "migrate_campaigns": {
            "type": "object",
            "required": [
              "code_id",
              "msg"
            ],
            "properties": {
              "code_id": {
                "$ref": "#/definitions/Uint64"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Global setting for whether or not to enforce the campaign creation whitelist ADMIN ONLY ACTION",
        "type": "object",
        "required": [
          "enforce_whitelist"
        ],
        "properties": {
          "enforce_whitelist": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Add a new whitelisted address that is allowed to create campaigns ADMIN ONLY ACTION",
        "type": "object",
        "required": [
          "grant_whitelist"
        ],
        "properties": {
          "grant_whitelist": {
            "type": "object",
            "required": [
              "address",
              "test_creation_only"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "test_creation_only": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove an address from the whitelist ADMIN ONLY ACTION",
        "type": "object",
        "required": [
          "revoke_whitelist"
        ],
        "properties": {
          "revoke_whitelist": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "For changing the contract's priviledged user ADMIN ONLY ACTION",
        "type": "object",
        "required": [
          "set_admin"
        ],
        "properties": {
          "set_admin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "ADMIN ONLY ACTION",
        "type": "object",
        "required": [
          "set_campaign_contract_code_id"
        ],
        "properties": {
          "set_campaign_contract_code_id": {
            "$ref": "#/definitions/Uint64"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Create and store a new campaign",
        "type": "object",
        "required": [
          "create_campaign"
        ],
        "properties": {
          "create_campaign": {
            "type": "object",
            "required": [
              "campaign_metadata"
            ],
            "properties": {
              "campaign_metadata": {
                "$ref": "#/definitions/CampaignMetadata"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "To be used when a campaign is completed and no longer needed ONLY THE CAMPAIGN ITSELF CAN CALL THIS",
        "type": "string",
        "enum": [
          "archive_campaign"
        ]
      },
      {
        "description": "Removes an campaign ADMIN ONLY ACTION",
        "type": "object",
        "required": [
          "delete_campaign"
        ],
        "properties": {
          "delete_campaign": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CampaignMetadata": {
        "type": "object",
        "required": [
          "accepted_denom",
          "description",
          "end_timestamp",
          "incentives",
          "is_nsfw",
          "name",
          "owner",
          "start_timestamp",
          "test_campaign"
        ],
        "properties": {
          "accepted_denom": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "end_timestamp": {
            "$ref": "#/definitions/Timestamp"
          },
          "incentives": {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/IncentiveCriteria"
                },
                {
                  "$ref": "#/definitions/Reward"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "is_nsfw": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "start_timestamp": {
            "$ref": "#/definitions/Timestamp"
          },
          "test_campaign": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "IncentiveCriteria": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "all_donations_above"
            ],
            "properties": {
              "all_donations_above": {
                "type": "object",
                "required": [
                  "min_donation"
                ],
                "properties": {
                  "min_donation": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The donors from from_position to to_position inclusive will receive a reward The positions are 1-indexed If from_position is 1 and to_position is 100, then the top 100 donors will receive a reward",
            "type": "object",
            "required": [
              "tokens_donated_by_position"
            ],
            "properties": {
              "tokens_donated_by_position": {
                "type": "object",
                "required": [
                  "from_position",
                  "to_position"
                ],
                "properties": {
                  "from_position": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "to_position": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "percent_tokens_donated"
            ],
            "properties": {
              "percent_tokens_donated": {
                "type": "object",
                "required": [
                  "from_percent",
                  "to_percent"
                ],
                "properties": {
                  "from_percent": {
                    "$ref": "#/definitions/Decimal"
                  },
                  "to_percent": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "first_donors"
            ],
            "properties": {
              "first_donors": {
                "type": "object",
                "required": [
                  "count",
                  "min_donation"
                ],
                "properties": {
                  "count": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "min_donation": {
                    "$ref": "#/definitions/Uint64"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The first X% of donors will receive a reward",
            "type": "object",
            "required": [
              "first_donors_by_percentage"
            ],
            "properties": {
              "first_donors_by_percentage": {
                "type": "object",
                "required": [
                  "min_donation",
                  "percentage"
                ],
                "properties": {
                  "min_donation": {
                    "$ref": "#/definitions/Uint64"
                  },
                  "percentage": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Reward": {
        "type": "string",
        "enum": [
          "one_of_one_nft_airdrop",
          "nft_airdrop",
          "whitelist_spot"
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": [
          "settings"
        ]
      },
      {
        "type": "object",
        "required": [
          "creator_whitelist"
        ],
        "properties": {
          "creator_whitelist": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "campaigns"
        ],
        "properties": {
          "campaigns": {
            "type": "object",
            "required": [
              "campaign_type"
            ],
            "properties": {
              "campaign_status": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CampaignStatus"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "campaign_type": {
                "$ref": "#/definitions/CampaignType"
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "CampaignStatus": {
        "oneOf": [
          {
            "description": "Campaign is currently valid and not expired",
            "type": "string",
            "enum": [
              "active"
            ]
          },
          {
            "description": "Campaign was successfully funded and reward distribution is underway",
            "type": "string",
            "enum": [
              "funding_closed"
            ]
          },
          {
            "description": "Rewards have been distributed and the campaign is complete",
            "type": "string",
            "enum": [
              "completed"
            ]
          },
          {
            "description": "Strategy ran it's whole course without reaching it's funding minimum",
            "type": "string",
            "enum": [
              "expired"
            ]
          },
          {
            "description": "Strategy was cancelled before funds were donated",
            "type": "string",
            "enum": [
              "cancelled"
            ]
          }
        ]
      },
      "CampaignType": {
        "type": "string",
        "enum": [
          "main",
          "test",
          "main_archived",
          "test_archived"
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "campaigns": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_CampaignsResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/CampaignsResponse"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CampaignStatus": {
          "oneOf": [
            {
              "description": "Campaign is currently valid and not expired",
              "type": "string",
              "enum": [
                "active"
              ]
            },
            {
              "description": "Campaign was successfully funded and reward distribution is underway",
              "type": "string",
              "enum": [
                "funding_closed"
              ]
            },
            {
              "description": "Rewards have been distributed and the campaign is complete",
              "type": "string",
              "enum": [
                "completed"
              ]
            },
            {
              "description": "Strategy ran it's whole course without reaching it's funding minimum",
              "type": "string",
              "enum": [
                "expired"
              ]
            },
            {
              "description": "Strategy was cancelled before funds were donated",
              "type": "string",
              "enum": [
                "cancelled"
              ]
            }
          ]
        },
        "CampaignsResponse": {
          "type": "object",
          "required": [
            "campaign_addr",
            "metadata",
            "status",
            "total_donations",
            "total_donors"
          ],
          "properties": {
            "campaign_addr": {
              "$ref": "#/definitions/Addr"
            },
            "metadata": {
              "$ref": "#/definitions/ValidatedCampaignMetadata"
            },
            "status": {
              "$ref": "#/definitions/CampaignStatus"
            },
            "total_donations": {
              "$ref": "#/definitions/Coin"
            },
            "total_donors": {
              "$ref": "#/definitions/Uint64"
            }
          },
          "additionalProperties": false
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "IncentiveCriteria": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "all_donations_above"
              ],
              "properties": {
                "all_donations_above": {
                  "type": "object",
                  "required": [
                    "min_donation"
                  ],
                  "properties": {
                    "min_donation": {
                      "$ref": "#/definitions/Uint64"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "The donors from from_position to to_position inclusive will receive a reward The positions are 1-indexed If from_position is 1 and to_position is 100, then the top 100 donors will receive a reward",
              "type": "object",
              "required": [
                "tokens_donated_by_position"
              ],
              "properties": {
                "tokens_donated_by_position": {
                  "type": "object",
                  "required": [
                    "from_position",
                    "to_position"
                  ],
                  "properties": {
                    "from_position": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    },
                    "to_position": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "percent_tokens_donated"
              ],
              "properties": {
                "percent_tokens_donated": {
                  "type": "object",
                  "required": [
                    "from_percent",
                    "to_percent"
                  ],
                  "properties": {
                    "from_percent": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "to_percent": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "first_donors"
              ],
              "properties": {
                "first_donors": {
                  "type": "object",
                  "required": [
                    "count",
                    "min_donation"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    },
                    "min_donation": {
                      "$ref": "#/definitions/Uint64"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "The first X% of donors will receive a reward",
              "type": "object",
              "required": [
                "first_donors_by_percentage"
              ],
              "properties": {
                "first_donors_by_percentage": {
                  "type": "object",
                  "required": [
                    "min_donation",
                    "percentage"
                  ],
                  "properties": {
                    "min_donation": {
                      "$ref": "#/definitions/Uint64"
                    },
                    "percentage": {
                      "$ref": "#/definitions/Decimal"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Reward": {
          "type": "string",
          "enum": [
            "one_of_one_nft_airdrop",
            "nft_airdrop",
            "whitelist_spot"
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        },
        "ValidatedCampaignMetadata": {
          "type": "object",
          "required": [
            "accepted_denom",
            "description",
            "end_timestamp",
            "fee_address",
            "incentives",
            "instantiated_by",
            "is_nsfw",
            "name",
            "owner",
            "start_timestamp",
            "test_campaign",
            "withdrawl_fee"
          ],
          "properties": {
            "accepted_denom": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "end_timestamp": {
              "$ref": "#/definitions/Timestamp"
            },
            "fee_address": {
              "$ref": "#/definitions/Addr"
            },
            "incentives": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/IncentiveCriteria"
                  },
                  {
                    "$ref": "#/definitions/Reward"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "instantiated_by": {
              "description": "The index contract that generated this contract and is the cosmwasm admin",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "is_nsfw": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "owner": {
              "description": "The address that will be the owner of the campaign This should be the external user who is creating the nft collection",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            },
            "start_timestamp": {
              "$ref": "#/definitions/Timestamp"
            },
            "test_campaign": {
              "type": "boolean"
            },
            "withdrawl_fee": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "creator_whitelist": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_WhitelistEntry",
      "type": "array",
      "items": {
        "$ref": "#/definitions/WhitelistEntry"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "WhitelistEntry": {
          "type": "object",
          "required": [
            "address",
            "test_creation_only"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/Addr"
            },
            "test_creation_only": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "settings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IndexSettings",
      "type": "object",
      "required": [
        "admin",
        "campaign_contract_code_id",
        "campaign_funds_withdrawl_fee",
        "creation_fee",
        "enforce_whitelist",
        "treasury_address"
      ],
      "properties": {
        "admin": {
          "$ref": "#/definitions/Addr"
        },
        "campaign_contract_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "campaign_funds_withdrawl_fee": {
          "$ref": "#/definitions/Decimal"
        },
        "creation_fee": {
          "$ref": "#/definitions/Coin"
        },
        "enforce_whitelist": {
          "type": "boolean"
        },
        "treasury_address": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
